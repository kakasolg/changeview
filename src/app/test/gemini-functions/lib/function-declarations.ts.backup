// A-1 & A-2 세트: Function Calling 테스트
// Function Declarations 정의 (최신 @google/genai 방식)

import { Type } from '@google/genai';

// =============================================================================
// A-1 세트: 기본 Function Calling 테스트
// =============================================================================

/**
 * 간단한 괘 정보 조회 Function Declaration
 * 테스트 목적: Function Calling 기본 동작 검증
 */
export const getHexagramInfoDeclaration = {
  name: "get_hexagram_info",
  description: "64괘 중 특정 번호의 괘 기본 정보를 조회합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      number: {
        type: Type.INTEGER,
        description: "조회할 괘의 번호 (1-64)",
        minimum: 1,
        maximum: 64
      }
    },
    required: ["number"]
  }
};

/**
 * 괘 키워드 검색 Function Declaration
 * 테스트 목적: 문자열 파라미터 처리 검증
 */
export const searchHexagramByKeywordDeclaration = {
  name: "search_hexagram_by_keyword",
  description: "키워드로 관련 괘를 검색합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      keyword: {
        type: Type.STRING,
        description: "검색할 키워드 (예: 창조, 리더십, 변화 등)"
      },
      limit: {
        type: Type.INTEGER,
        description: "검색 결과 최대 개수",
        minimum: 1,
        maximum: 10,
        default: 3
      }
    },
    required: ["keyword"]
  }
};

// =============================================================================
// A-2 세트: 고도화된 괘 선택 Function Calling
// =============================================================================

/**
 * 사용자 상황 분석 Function Declaration
 * 입력 텍스트에서 핵심 요소를 추출하여 괘 선택에 활용
 */
export const analyzeUserSituationDeclaration = {
  name: "analyze_user_situation",
  description: "사용자의 입력 텍스트를 분석하여 감정, 상황, 키워드를 추출합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      userInput: {
        type: Type.STRING,
        description: "분석할 사용자의 입력 텍스트"
      }
    },
    required: ["userInput"]
  }
};

/**
 * 괘 적합도 계산 Function Declaration
 * 사용자 상황에 따른 64괘 각각의 관련성 점수 계산
 */
export const calculateHexagramCompatibilityDeclaration = {
  name: "calculate_hexagram_compatibility",
  description: "사용자 상황 분석 결과를 바탕으로 64괘 각각의 적합도 점수를 계산합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      emotions: {
        type: Type.ARRAY,
        items: { type: Type.STRING },
        description: "추출된 감정 배열"
      },
      situation: {
        type: Type.STRING,
        description: "상황 요약"
      },
      keywords: {
        type: Type.ARRAY,
        items: { type: Type.STRING },
        description: "핵심 키워드 배열"
      }
    },
    required: ["emotions", "situation", "keywords"]
  }
};

/**
 * 최종 괘 선택 Function Declaration
 * 적합도 점수를 바탕으로 논리적 근거와 함께 괘 추천
 */
export const selectFinalHexagramDeclaration = {
  name: "select_final_hexagram",
  description: "적합도 점수와 분석 결과를 바탕으로 최종 괘를 선택하고 근거를 제시합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      compatibilityScores: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            number: { type: Type.INTEGER },
            score: { type: Type.NUMBER },
            reason: { type: Type.STRING }
          }
        },
        description: "괘별 적합도 점수 배열"
      },
      userAnalysis: {
        type: Type.OBJECT,
        properties: {
          emotions: { type: Type.ARRAY, items: { type: Type.STRING } },
          situation: { type: Type.STRING },
          keywords: { type: Type.ARRAY, items: { type: Type.STRING } }
        },
        description: "사용자 상황 분석 결과"
      }
    },
    required: ["compatibilityScores", "userAnalysis"]
  }
};

// =============================================================================
// Function Declarations 배열 및 Tools 설정
// =============================================================================

/**
 * A-1 세트만 포함하는 기본 Function Declarations 배열
 */
export const basicFunctionDeclarations = [
  getHexagramInfoDeclaration,
  searchHexagramByKeywordDeclaration
];

/**
 * A-2 세트만 포함하는 고급 Function Declarations 배열
 */
export const advancedFunctionDeclarations = [
  analyzeUserSituationDeclaration,
  calculateHexagramCompatibilityDeclaration,
  selectFinalHexagramDeclaration
];

/**
 * 모든 Function Declarations 배열 (A-1 + A-2)
 */
export const allFunctionDeclarations = [
  ...basicFunctionDeclarations,
  ...advancedFunctionDeclarations
];

/**
 * 최신 @google/genai 방식의 기본 tools 설정 (A-1)
 */
export const basicFunctionCallingTools = [
  {
    functionDeclarations: basicFunctionDeclarations
  }
];

/**
 * 최신 @google/genai 방식의 고급 tools 설정 (A-2)
 */
export const advancedFunctionCallingTools = [
  {
    functionDeclarations: advancedFunctionDeclarations
  }
];

/**
 * 최신 @google/genai 방식의 전체 tools 설정 (A-1 + A-2)
 */
export const functionCallingTools = [
  {
    functionDeclarations: allFunctionDeclarations
  }
];

// Function Declarations 정의 (최신 @google/genai 방식)

import { Type } from '@google/genai';

/**
 * 간단한 괘 정보 조회 Function Declaration
 * 테스트 목적: Function Calling 기본 동작 검증
 */
export const getHexagramInfoDeclaration = {
  name: "get_hexagram_info",
  description: "64괘 중 특정 번호의 괘 기본 정보를 조회합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      number: {
        type: Type.INTEGER,
        description: "조회할 괘의 번호 (1-64)",
        minimum: 1,
        maximum: 64
      }
    },
    required: ["number"]
  }
};

/**
 * 괘 키워드 검색 Function Declaration
 * 테스트 목적: 문자열 파라미터 처리 검증
 */
export const searchHexagramByKeywordDeclaration = {
  name: "search_hexagram_by_keyword",
  description: "키워드로 관련 괘를 검색합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      keyword: {
        type: Type.STRING,
        description: "검색할 키워드 (예: 창조, 리더십, 변화 등)"
      },
      limit: {
        type: Type.INTEGER,
        description: "검색 결과 최대 개수",
        minimum: 1,
        maximum: 10,
        default: 3
      }
    },
    required: ["keyword"]
  }
};

/**
 * 모든 Function Declarations 배열
 */
export const allFunctionDeclarations = [
  getHexagramInfoDeclaration,
  searchHexagramByKeywordDeclaration
];

// =============================================================================
// A-2 세트: 고도화된 괘 선택 Function Calling
// =============================================================================

/**
 * 사용자 상황 분석 Function Declaration
 * 입력 텍스트에서 핵심 요소를 추출하여 괘 선택에 활용
 */
export const analyzeUserSituationDeclaration = {
  name: "analyze_user_situation",
  description: "사용자의 입력 텍스트를 분석하여 감정, 상황, 키워드를 추출합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      userInput: {
        type: Type.STRING,
        description: "분석할 사용자의 입력 텍스트"
      }
    },
    required: ["userInput"]
  }
};

/**
 * 괘 적합도 계산 Function Declaration
 * 사용자 상황에 따른 64괘 각각의 관련성 점수 계산
 */
export const calculateHexagramCompatibilityDeclaration = {
  name: "calculate_hexagram_compatibility",
  description: "사용자 상황 분석 결과를 바탕으로 64괘 각각의 적합도 점수를 계산합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      emotions: {
        type: Type.ARRAY,
        items: { type: Type.STRING },
        description: "추출된 감정 배열"
      },
      situation: {
        type: Type.STRING,
        description: "상황 요약"
      },
      keywords: {
        type: Type.ARRAY,
        items: { type: Type.STRING },
        description: "핵심 키워드 배열"
      }
    },
    required: ["emotions", "situation", "keywords"]
  }
};

/**
 * 최종 괘 선택 Function Declaration
 * 적합도 점수를 바탕으로 논리적 근거와 함께 괘 추천
 */
export const selectFinalHexagramDeclaration = {
  name: "select_final_hexagram",
  description: "적합도 점수와 분석 결과를 바탕으로 최종 괘를 선택하고 근거를 제시합니다.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      compatibilityScores: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            number: { type: Type.INTEGER },
            score: { type: Type.NUMBER },
            reason: { type: Type.STRING }
          }
        },
        description: "괘별 적합도 점수 배열"
      },
      userAnalysis: {
        type: Type.OBJECT,
        properties: {
          emotions: { type: Type.ARRAY, items: { type: Type.STRING } },
          situation: { type: Type.STRING },
          keywords: { type: Type.ARRAY, items: { type: Type.STRING } }
        },
        description: "사용자 상황 분석 결과"
      }
    },
    required: ["compatibilityScores", "userAnalysis"]
  }
};

/**
 * 모든 Function Declarations 배열 (업데이트)
 */
export const allFunctionDeclarations = [
  getHexagramInfoDeclaration,
  searchHexagramByKeywordDeclaration,
  analyzeUserSituationDeclaration,
  calculateHexagramCompatibilityDeclaration,
  selectFinalHexagramDeclaration

/**
 * 최신 @google/genai 방식의 tools 설정
 */
export const functionCallingTools = [
  {
    functionDeclarations: allFunctionDeclarations
  }
];

